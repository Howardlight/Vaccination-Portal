/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.*;
import Model.*;
import java.util.ArrayList;

/**
 *
 * @author John Doe
 */
public class Register extends javax.swing.JFrame {

    // THIS IS A SINGLETON
    // meaning only one instance of the class can be instatiated
    // CON BEING IT IS STATIC
    PaController paCont;
    DocController docCont;
    RegController regCont;
    private static Register instance;

    // Contructor is private
    private Register() {
        initComponents();
        setResizable(false);
        setTitle("Register");
        paCont = new PaController();
        docCont = new DocController();
        regCont = new RegController();
        
        // DISPOSE ON CLOSE closes the frame but keeps the program running
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        // hide ErrorField
        ErrorField.setVisible(false);

        // adds blank option as first option, cleaner that way
        // if blank is chosen, city is read as "Unspecified"
        CityComboBox.insertItemAt("", 0);
        CityComboBox.setSelectedIndex(-1);
    }

    // method that creates the instance(contructs the obj)
    public static Register getInstance() {
        if (instance == null) {
            instance = new Register();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        NameField = new javax.swing.JTextField();
        AgeField = new javax.swing.JTextField();
        OccField = new javax.swing.JTextField();
        PassField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Submit = new javax.swing.JButton();
        ErrorField = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        CityComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name:");

        AgeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgeFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Password:");

        jLabel3.setText("Occupation:");

        jLabel4.setText("Age:");

        jLabel5.setText("City:");

        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        ErrorField.setForeground(new java.awt.Color(255, 0, 51));
        ErrorField.setText("ERROR");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Please Enter your Information:");

        CityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Beirut", "Tripoli", "Sidon", "Tyr", "Baalbek", "Nabatieh" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NameField, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(PassField)
                            .addComponent(CityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Submit))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OccField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AgeField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(40, 40, 40))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ErrorField)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OccField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AgeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(Submit)
                    .addComponent(CityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(ErrorField)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AgeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AgeFieldActionPerformed

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed

        // get all variable from fields
        String name = NameField.getText();
        String pass = PassField.getText();
        String occ = OccField.getText();

        // City Logic
        String city;
        if (CityComboBox.getSelectedItem() == null || CityComboBox.getSelectedItem().toString().equals("")) {
            city = "Unspecified";
        } else {
            city = CityComboBox.getSelectedItem().toString();
        }

        // if true, none of the rest of the code will run
        boolean empty = false;

        String[] textFieldList = new String[4];
        textFieldList[0] = name;
        textFieldList[1] = pass;
        textFieldList[2] = occ;
        textFieldList[3] = city;

        // loop over the list and check if any field is empty("")
        for (int i = 0; i < textFieldList.length; i++) {
            if (textFieldList[i].equals("")) {
                empty = true;
                ErrorField.setText("All text fields must be filled!");
                ErrorField.setVisible(true);
            }
        }

        // if none of the text fields are empty, ....
        if (!empty) {

            // loop over these to check if person(name and city) already exists
            ArrayList<Patient> allpatients;
            ArrayList<Doctor> alldoctors;
            try {
                // Pass string of AgeField as integer, if not integer, get caught by
                // exception
                int age = Integer.parseInt(AgeField.getText());

                // used to tell obj creator not to create new Patient if
                // it exists
                boolean exists = false;

                allpatients = paCont.getAllPatients();
                for (int i = 0; i < allpatients.size(); i++) {
                    if (allpatients.get(i).getName().toLowerCase().equals(name.toLowerCase()) && allpatients.get(i).getCity().equals(city)) {
                        exists = true;
                        ErrorField.setText("Patient Already Exists!");
                        ErrorField.setVisible(true);
                        break;
                    }
                }

                // incase of doctor, it only checks the name
                alldoctors = docCont.getAllDoctors();
                for (int i = 0; i < alldoctors.size(); i++) {
                    if (alldoctors.get(i).getName().equals(name)) {
                        exists = true;
                        ErrorField.setText("Doctor info Detected!");
                        ErrorField.setVisible(true);
                        break;
                    }
                }

                // if it does exist, no patient will be added
                if (!exists) {

                    // create the obj and adds it to Patients.txt
                    paCont.addPatient(name, pass, city, occ, age);
                    regCont.addRegistration(name);
                    
                    
                    // Display Success Message
                    ErrorField.setText("Patient has been added!");
                    ErrorField.setVisible(true);
                }

                // Reset All Text Fields
                NameField.setText("");
                CityComboBox.setSelectedIndex(-1);
                OccField.setText("");
                PassField.setText("");
                AgeField.setText("");

            } catch (NumberFormatException ex) {
                ErrorField.setText("Age Must be a number!");
                ErrorField.setVisible(true);
            }
        }
    }//GEN-LAST:event_SubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AgeField;
    private javax.swing.JComboBox<String> CityComboBox;
    private javax.swing.JLabel ErrorField;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextField OccField;
    private javax.swing.JTextField PassField;
    private javax.swing.JButton Submit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
