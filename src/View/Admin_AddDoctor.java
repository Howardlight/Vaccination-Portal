/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.DocController;
import Controller.PaController;
import Model.Doctor;
import Model.Patient;
import java.util.ArrayList;

/**
 *
 * @author John Doe
 */
public class Admin_AddDoctor extends javax.swing.JFrame {

    PaController paCont;
    DocController docCont;
    private static Admin_AddDoctor instance;
    private Admin_AddDoctor() {
        initComponents();
        setResizable(false);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setTitle("Admin Panel | Add Doctor");
        paCont = new PaController();
        docCont = new DocController();
        
        // hide error Label
        ErrorLabel.setVisible(false);
    }
    
    public static Admin_AddDoctor getInstance(){
        if( instance == null ) {
            instance = new Admin_AddDoctor();
        }
         return instance;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        NameField = new javax.swing.JTextField();
        PassField = new javax.swing.JTextField();
        Submit = new javax.swing.JButton();
        ErrorLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        HospComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Name:");

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Password:");

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Hospital:");

        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        ErrorLabel.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        ErrorLabel.setForeground(new java.awt.Color(204, 0, 0));
        ErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ErrorLabel.setText("Error");

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel5.setText("Enter the relevent Doctor Info:");

        HospComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AUB MedCenter", "Al Salam Hosp", "Hammoud Hosp", "Al Janoub Hosp", "Hiram Hosp", "Al Rayan Hosp" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(HospComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(PassField)
                            .addComponent(NameField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Submit, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ErrorLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ErrorLabel))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(PassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Submit)
                    .addComponent(HospComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {HospComboBox, NameField, PassField});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed

        
        // GET ALL STRINGS
        String name = NameField.getText();
        String pass = PassField.getText();
        String hosp = HospComboBox.getSelectedItem().toString();
        
        // if true, none of the rest of the code will run
        boolean empty = false;

        String[] textFieldList = new String[3];
        textFieldList[0] = name;
        textFieldList[1] = pass;
        textFieldList[2] = hosp;


        // loop over the list and check if any field is empty("")
        for (int i = 0; i < textFieldList.length; i++) {
            if (textFieldList[i].equals("")) {
                empty = true;
                ErrorLabel.setText("All text fields must be filled!");
                ErrorLabel.setVisible(true);
            }
        }
        
        // if none of the text fields are empty, ....
        if (!empty) {

            // loop over these to check if person(name and city) already exists
            ArrayList<Patient> allpatients;
            ArrayList<Doctor> alldoctors;
            try {
               
                // used to tell obj creator not to create new Patient if
                // it exists
                boolean exists = false;

                allpatients = paCont.getAllPatients();
                for (int i = 0; i < allpatients.size(); i++) {
                    if (allpatients.get(i).getName().toLowerCase().equals(name.toLowerCase())) {
                        exists = true;
                        ErrorLabel.setText("Patient info Detected!");
                        ErrorLabel.setVisible(true);
                        break;
                    }
                }

                // incase of doctor, it only checks the name
                alldoctors = docCont.getAllDoctors();
                for (int i = 0; i < alldoctors.size(); i++) {
                    if (alldoctors.get(i).getName().toLowerCase().equals(name.toLowerCase()) && alldoctors.get(i).getHospital().equals(hosp)) {
                        exists = true;
                        ErrorLabel.setText("Doctor Already Exists!");
                        ErrorLabel.setVisible(true);
                        break;
                    }
                }
                
                // if it doesn't exists, no patient will be added
                if (!exists) {

                    // create the obj and adds it to Patients.txt
                    docCont.addDoctor(name, pass, hosp);

                    // Display Success Message
                    ErrorLabel.setText("Doctor has been added!");
                    ErrorLabel.setVisible(true);
                }

                // Reset All Text Fields
                NameField.setText("");
                HospComboBox.setSelectedIndex(-1);
                PassField.setText("");
                
                
                
                
            } catch (Exception ex) {
                ErrorLabel.setText("Error Occured!");
                ErrorLabel.setVisible(true);
            }
        
        
        }
        
        
        
        
        
    }//GEN-LAST:event_SubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_AddDoctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_AddDoctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_AddDoctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_AddDoctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin_AddDoctor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ErrorLabel;
    private javax.swing.JComboBox<String> HospComboBox;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextField PassField;
    private javax.swing.JButton Submit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
