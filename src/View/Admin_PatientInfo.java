/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.DocController;
import Controller.PaController;
import Controller.RegController;
import Model.Patient;
import Model.Registration;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author John Doe
 */
public class Admin_PatientInfo extends javax.swing.JFrame {

    PaController paCont;
    RegController regCont;
    public Admin_PatientInfo() {
        initComponents();
        paCont = new PaController();
        regCont = new RegController();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setResizable(false);
        setTitle("Admin Panel | Patients Info");
        
        
        // PROCCESSING DATA FOR THE TABLE
        try{
            // Create the columns
            String[] columns = new String[7];
            columns[0] = "Name";
            columns[1] = "City";
            columns[2] = "Occupation";
            columns[3] = "Age";
            columns[4] = "Doctor";
            columns[5] = "Vaccination";
            columns[6] = "RegDate";


            // Process the Array of Arrays
            ArrayList<Patient> allpatients = paCont.getAllPatients();
            ArrayList<Registration> allregs = regCont.getAllRegistrations();
            // turn each Obj into an array of data(Strings)
            String[][] allpatientsArray = new String[allpatients.size()][7];

            
            // variables used for passing data around
            String tempString;
            String tempStringList[] = new String[7];

            // this effectively processes the data to be passed to the table
            for(int i = 0; i < allpatients.size(); i++){

                // get toString, Split it using \t, then pass them into an array
                tempString = allpatients.get(i).toString();

                // Composition of List = [NAME, PASSWORD, CITY, OCC, AGE, DOCTOR, VACC]
                // Table Layout = [NAME, CITY, OCC, AGE, DOCTOR, VACC]
                // so: 0 to 0, 1 to null, 2 to 1, 3 to 2, 4 to 3, 5 to 4, 6 to 5
                tempStringList = tempString.split("\t");

                // Restructuring the data
                allpatientsArray[i][0] = tempStringList[0];
                allpatientsArray[i][1] = tempStringList[2];
                allpatientsArray[i][2] = tempStringList[3];
                allpatientsArray[i][3] = tempStringList[4];
                allpatientsArray[i][4] = tempStringList[5];
                allpatientsArray[i][5] = tempStringList[6];
                allpatientsArray[i][6] = "null";
                
                
                // KNOWN BUG // sometimes registered patient with a real reg
                // have their regdate set to null, check length of allregs, for
                // possible cause
                try {
                    
                    for(int j = 0; i < allregs.size(); j++){

                        if(allregs.get(j).getPatient_name().equals(tempStringList[0])){
                            
                            allpatientsArray[i][6] = allregs.get(j).getRegdate().toString();
                            break;        
                        }
                    }       
                } catch (Exception e) {};
            }
            
            // feed data to the table
            PatientTable.setModel(
                    // DefaultTableModel modified so CELLS CANNOT BE EDITED
                    new javax.swing.table.DefaultTableModel(allpatientsArray, columns){

                        @Override
                        public boolean isCellEditable(int row, int column) {
                           //all cells false
                           return false;
                        }
                    }
                );
            
        } catch(IndexOutOfBoundsException e){
            System.out.println("Table Data Processing IndexOutOfBounds");
            System.out.println("Closing Admin_PatientInfo");
            
            e.printStackTrace();
            
            // closes the frame
            dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        }
        
        // Create an auto sorter then add it to the Table
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(PatientTable.getModel());
        PatientTable.setRowSorter(sorter);
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        PatientTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "City", "Occupation", "Age", "Doctor", "Vaccination"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(PatientTable);
        if (PatientTable.getColumnModel().getColumnCount() > 0) {
            PatientTable.getColumnModel().getColumn(1).setResizable(false);
            PatientTable.getColumnModel().getColumn(2).setResizable(false);
            PatientTable.getColumnModel().getColumn(3).setResizable(false);
            PatientTable.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_PatientInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_PatientInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_PatientInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_PatientInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin_PatientInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PatientTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
